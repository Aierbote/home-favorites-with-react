{"version":3,"file":"static/js/92.253db15f.chunk.js","mappings":"6NAOA,MAAMA,EAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4HAQpBC,EAAaJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mKASvBG,EAAW,CAChBC,SAAU,UACVC,MAAO,UACPC,UAAW,QACXC,UAAW,SAGZX,EAAQY,UAAY,CAAC,EAKrB,MAAMC,EAAkB,CACvBJ,MAAO,WACPK,OAAQ,YAGHC,GAAOC,EAAAA,EAAAA,OACZC,IAM2D,IAN1D,GACAC,EAAE,OACFC,EAAS,wEAAuE,MAChFC,EAAQ,QAAO,QACfC,EAAU,UAAS,iBACnBC,EAAmBA,UACoBL,EACvC,MAEOM,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GAMvC,OACCC,EAAAA,EAAAA,MAACrB,EAAU,CAAAsB,SAAA,EACVC,EAAAA,EAAAA,KAAA,OAAKC,IAAKV,EAAQW,IAAI,GAAGC,MAAOxB,KAChCmB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKP,EAAMY,iBACXN,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,IAAEN,MACLO,EAAAA,EAAAA,KAAA,UACCK,QAASA,KAVZT,GAAYD,GAYRD,EAAiBJ,EAAG,EAErBa,MAAOlB,EAAgBc,UAEvBC,EAAAA,EAAAA,KAAA,QAAAD,SAAOJ,EArBM,eACC,kBAuBJ,IAiDhB,GA5CiCP,EAAAA,EAAAA,OAAKkB,IAAgC,IAA/B,SAAEP,GAAUO,EAClD,MAAM,aAAEC,EAAY,WAAEC,EAAU,cAAEC,IACjCC,EAAAA,EAAAA,MAEKhB,EACLiB,IAEA,IAAIC,EACJ,GAAIJ,EAAWK,SAASF,GAAc,CAKrCC,EAH2BJ,EAAWM,QACpCC,GAAWA,IAAWJ,IAGxBF,EAAcG,EACf,MACCA,EAAgB,IAAIJ,EAAYG,GAChCF,EAAcG,IAEfI,EAAAA,EAAAA,IAA+BJ,EAAc,EAG9C,OACCd,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAAlB,SAAA,EACCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKA,KACLC,EAAAA,EAAAA,KAAC5B,EAAO,CAAA2B,SACM,OAAZQ,QAAY,IAAZA,OAAY,EAAZA,EAAcW,KACdC,IAAA,IAAC,GAAE7B,EAAE,OAAEC,EAAM,MAAEC,EAAK,QAAEC,GAAoB0B,EAAA,OACzCnB,EAAAA,EAAAA,KAACb,EAAI,CACJG,GAAIA,EAEJC,OAAQA,EACRC,MAAOA,EACPC,QAASA,EAETC,iBAAkBA,GALbJ,EAMJ,QAIH,G","sources":["CardsGrid.tsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { FC, memo, useEffect, useState } from \"react\";\nimport { CardProps, GridProps, TypeMyContext } from \"./declaration\";\nimport { useAppContext } from \"./MyContext\";\nimport { utilitySaveLikedCardsToStorage } from \"./utility\";\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tflex-direction: row;\n\tjustify-content: space-around;\n\tgap: 2.125rem;\n`;\n\nconst StyledCard = styled.div`\n\tborder: #0000001a 0.125rem solid;\n\twidth: 22.5rem;\n\tpadding: 1rem;\n\tborder-radius: 1rem;\n\tmax-height: 30.1525rem;\n\tmin-height: min-content;\n`;\n\nconst imgWidth = {\n\tmaxWidth: \"22.5rem\",\n\twidth: \"22.5rem\",\n\tmaxHeight: \"15rem\",\n\tminHeight: \"10rem\",\n};\n\nWrapper.propTypes = {};\n\n// const Card = styled.div``;\n// Card.propTypes = {};\n\nconst styleHearButton = {\n\twidth: \"2.125rem\",\n\theight: \"2.125rem\",\n};\n\nconst Card = memo(\n\t({\n\t\tid,\n\t\timgUrl = \"https://tse2.mm.bing.net/th?id=OIP.Uge8n3cdvDQTUusYkX_BwAHaFl&pid=Api\",\n\t\ttitle = \"title\",\n\t\tsummary = \"summary\",\n\t\ttoggleLikeInCard = () => {},\n\t}: TypeMyContext[\"contentCards\"][number]): JSX.Element => {\n\t\tconst iconTrue = \"❤️\";\n\t\tconst iconFalse = \"♡\";\n\t\tconst [isLiked, setIsLiked] = useState(false);\n\n\t\tconst onSaveToFavorites = () => {\n\t\t\tsetIsLiked(!isLiked);\n\t\t};\n\n\t\treturn (\n\t\t\t<StyledCard>\n\t\t\t\t<img src={imgUrl} alt=\"\" style={imgWidth} />\n\t\t\t\t<div>\n\t\t\t\t\t<h3>{title.toUpperCase()}</h3>\n\t\t\t\t\t<p> {summary}</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tonSaveToFavorites();\n\t\t\t\t\t\t\ttoggleLikeInCard(id);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={styleHearButton}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span>{isLiked ? iconTrue : iconFalse}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</StyledCard>\n\t\t);\n\t}\n);\n\nconst CardsGrid: FC<GridProps> = memo(({ children }): JSX.Element => {\n\tconst { contentCards, likedCards, setLikedCards } =\n\t\tuseAppContext() as TypeMyContext;\n\n\tconst toggleLikeInCard = (\n\t\tidkeyOfCard: TypeMyContext[\"contentCards\"][number][\"id\"]\n\t) => {\n\t\tlet newLikedCards: TypeMyContext[\"likedCards\"];\n\t\tif (likedCards.includes(idkeyOfCard)) {\n\t\t\t// toggling off, id all likesCard minus the id of card toggled\n\t\t\tconst filteredLikedCards = likedCards.filter(\n\t\t\t\t(liked_) => liked_ !== idkeyOfCard\n\t\t\t);\n\t\t\tnewLikedCards = filteredLikedCards;\n\t\t\tsetLikedCards(newLikedCards);\n\t\t} else {\n\t\t\tnewLikedCards = [...likedCards, idkeyOfCard];\n\t\t\tsetLikedCards(newLikedCards);\n\t\t}\n\t\tutilitySaveLikedCardsToStorage(newLikedCards);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<h2>{children}</h2>\n\t\t\t<Wrapper>\n\t\t\t\t{contentCards?.map(\n\t\t\t\t\t({ id, imgUrl, title, summary }: CardProps): JSX.Element => (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tid={id}\n\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\timgUrl={imgUrl}\n\t\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\t\tsummary={summary}\n\t\t\t\t\t\t\t// TODO : FIXME :\n\t\t\t\t\t\t\ttoggleLikeInCard={toggleLikeInCard}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n});\n\nexport default CardsGrid;\n"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","StyledCard","_templateObject2","imgWidth","maxWidth","width","maxHeight","minHeight","propTypes","styleHearButton","height","Card","memo","_ref","id","imgUrl","title","summary","toggleLikeInCard","isLiked","setIsLiked","useState","_jsxs","children","_jsx","src","alt","style","toUpperCase","onClick","_ref2","contentCards","likedCards","setLikedCards","useAppContext","idkeyOfCard","newLikedCards","includes","filter","liked_","utilitySaveLikedCardsToStorage","_Fragment","map","_ref3"],"sourceRoot":""}